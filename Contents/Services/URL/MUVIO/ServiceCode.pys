RE_JSON = Regex('"streams":{.+?(\[{.+?}\])')

####################################################################################################
def MetadataObjectForURL(url):

	return VideoClipObject(
		title = 'MUVIO'
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, resolution=resolution))
			],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = resolution,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		) for resolution in ['720', '360']
	]

####################################################################################################
def PlayVideo(url, resolution='720', **kwargs):

	json_obj = GetJSON(url)
	video_url_high = None
	video_url_med = None
	version_high = 0
	version_med = 0

	for stream in json_obj:

		if not 'quality' in stream:
			continue

		if stream['quality'] == 'High' and stream['version'] > version_high:
			video_url_high = stream['url']

		elif stream['quality'] == 'Med' and stream['version'] > version_med:
			video_url_med = stream['url']

		else:
			continue

	if resolution == '720' and video_url_high:
		video_url = video_url_high
	elif video_url_med:
		video_url = video_url_med
	else:
		raise Ex.MediaNotAvailable

	return Redirect('http://%s' % (video_url.split('//')[-1]))

####################################################################################################
def GetJSON(url):

	page = HTTP.Request(url.replace('muvio://', 'http://')).content
	json = RE_JSON.search(page)

	if not json:
		raise Ex.MediaNotAvailable

	return JSON.ObjectFromString(json.group(1))
